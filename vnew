#! /usr/bin/perl

use strict;
use warnings;

use VCtools::Base;
use VCtools::Args;
use VCtools::Common;


#################################
# OPTIONS AND ENVIRONMENT VARS
#################################

VCtools::switch('recursive', 'r', 'operate recursively');
VCtools::args('files', 'list', 'file(s) (or directory/ies) to commit');
VCtools::getopts();

# remember, directories are files too
my @files = VCtools::files();


#################################
# CHECK FOR ERRORS
#################################

my $proj = VCtools::verify_files_and_group(@files);

# get statuses for everything at once (quicker that way)
VCtools::cache_file_status(@files);

foreach my $file (@files)
{
	VCtools::fatal_error("$file is already in VC")
			if VCtools::exists_in_vc($file);
}


#################################
# MAIN
#################################

my @new_files = VCtools::add_files(@files,
		{ DONT_RECURSE => not VCtools::recursive() } );

# theoretically, we should only see new files in the case of a recursive add
# let's ask the user if this is okay with them
# (if not, we'll just revert the adds)
if (@new_files)
{
	VCtools::list_files($proj, "have been added unexpectedly", @new_files);
	unless (VCtools::yesno("is this okay?"))
	{
		VCtools::revert_files(@new_files, @files);
		VCtools::info_msg("no files have been added");
		exit;
	}
}

VCtools::commit_files($proj, @files, @new_files);

print "done\n" unless $?;
