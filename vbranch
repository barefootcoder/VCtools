#! /usr/bin/perl

###########################################################################
#
# vbranch
#
###########################################################################
#
# This command either changes your current working copy from the trunk to a branch (like svn switch), or
# creates a new branch for you based on your current working copy (like svn copy).  THIS COMMAND DOES NOT YET
# WORK WITH CVS!
#
# #########################################################################
#
# All the code herein is released under the Artistic License
#		( http://www.perl.com/language/misc/Artistic.html )
# Copyright (c) 2004-2008 Barefoot Software, Copyright (c) 2004-2005 ThinkGeek
#
###########################################################################

use strict;
use warnings;

use VCtools::Base;
use VCtools::Args;
use VCtools::Common;


#################################
# OPTIONS AND ENVIRONMENT VARS
#################################

VCtools::switch('create', 'c', 'create new branch with given name');
VCtools::args('branch', 'single', 'name of branch to switch to (must exist) or create with -c (must not exist)');
VCtools::args('files', 'optlist', 'file(s) and/or directory/ies to switch over to branch (default: .); not used with -c');
VCtools::getopts();

# remember, directories are files too
my @files = VCtools::files();
if (not VCtools::create() and not @files)
{
	VCtools::prompt_to_continue("Your entire local copy from this directory down will be converted to the branch!");
	@files = (".");
}
print STDERR "switch files: @files\n" if DEBUG >= 3;


#################################
# CHECK FOR ERRORS
#################################

my $proj;
if (VCtools::create())
{
	$proj = VCtools::check_common_errors();
	if (VCtools::branch_exists_in_vc($proj, VCtools::branch()))
	{
		VCtools::fatal_error("branch " . VCtools::branch() . " already exists; cannot create");
	}
}
else
{
	$proj = VCtools::verify_files_and_group(@files);
	unless (VCtools::branch_exists_in_vc($proj, VCtools::branch()))
	{
		VCtools::fatal_error("no such branch " . VCtools::branch());
	}

	# get statuses for everything at once (quicker that way)
	# remember, vbranch is always recursive
	my @all_files = VCtools::cache_file_status(@files, { DONT_RECURSE => 0 });

	foreach my $file (@files)
	{
		VCtools::fatal_error("$file is not in VC")
				unless VCtools::exists_in_vc($file);
	}

	my @mod_files;
	foreach my $file (@all_files)
	{
		push @mod_files, $file if VCtools::modified_from_vc($file);
	};
	if (@mod_files)
	{
		VCtools::list_files("are modified from the repository versions", @mod_files);
		VCtools::prompt_to_continue("If you want these mods to go into the branch, continue.",
				"If you want the mods to stay in the trunk, stop now and vcommit before you vbranch.");
	}
}


#################################
# MAIN
#################################

if (VCtools::create())
{
	VCtools::create_branch($proj, VCtools::branch());
}
else
{
	VCtools::switch_to_branch($proj, VCtools::branch(), @files);
}

print "done\n" unless $?;


#################################
# SUBS
#################################
