<git>
	DefaultMainline = master

	<info>
		user <<---
			git config github.user
		---

		status <<---
			git status
		---

		is_dirty <<---
			git status -s --untracked=normal
		---

		has_staged <<---
			{ %status =~ /Changes to be committed:/ }
		---

		mod_files <<---
			git status -s | awk '{print $2}'
		---

		staged_files <<---
			git status -s | awk '$0 ~ /^[A-Z]/ {print $2}'
		---

		cur_branch <<---
			git rev-parse --abbrev-ref HEAD
		---

		branches <<---
			git branch --no-color | cut -c3-
		---

		remote_branches <<---
			git branch -r --no-color | cut -c3-
		---

		tags <<---
			git tag
		---
	</info>

	<commands>
		stat <<---
			>
			> %status
			>
			git --no-pager stash list
			>
		---

		show-branches <<---
			git branch
		---

		unbranch <<---
			git checkout %Mainline
		---

		sync <<---
			STASH_MESSAGE='Local changes in effect as of `' . %me . ' sync`'
			%is_dirty -> git stash save -u "$STASH_MESSAGE"
			git pull --rebase
			git stash list | grep -q "$STASH_MESSAGE" && git stash pop ||:
		---

		push <<---
			= sync
			git push
		---

		stage <<---
			git add -i .
		---

		unstage <<---
			# for some reason, git reset HEAD always returns 1 instead of 0 ...
			%files  -> git reset HEAD %files || :
			!%files -> git reset HEAD %staged_files || :
		---

		unget <<---
			git checkout -- %files
		---

		resolved <<---
			# for some reason, git reset HEAD always returns 1 instead of 0 ...
			git reset HEAD %files || :
		---

		commit <<---
			%files && %has_staged -> ! Cannot commit specific files with staged changes
			!%files && !%has_staged -> ! Either stage changes or specify files to commit
			%has_staged -> git commit -v
			!%has_staged -> git commit -v %files
		---

		commit-fix <<---
			`git branch -r --no-color --contains HEAD` -> ! Cannot fix last commit; it has already been pushed.
			git commit -v --amend
		---
	</commands>

</git>

<CustomCommand stash>
	Description = Stash uncommitted changes to make working copy clean
	Verify = project
	<Trailing message>
		description = optional message to identify stash
		singular = message
		qty = 0..1
	</Trailing>

	action <<---
		git stash save -u "%message"
		= stat
	---
</CustomCommand>

<CustomCommand unstash>
	Description = Restore previously stashed changes
	Verify = project
	<Trailing name>
		description = optional name ("stash@{1}") or number ("1") to identify stash
		singular = name
		qty = 0..1
	</Trailing>

	action <<---
		# make it so you can just go `vc unstash 1` and get `git stash pop "stash@{1}"`
		(%name[0] // '') =~ /^\d+$/		->		STASH=sprintf('stash@{%s}', %name[0])
		# or, if you don't use a number, it'll pick the first stash whose message matches the string
		# (can use regex, but grep style, not perl style)
		(%name[0] // '') =~ /\D/		->		STASH=`git stash list --grep '%name[0]' --format=\%gd`
		%name[0] and not '$STASH'		->		! Could not find the stash: %name[0]
		'$STASH'  -> git stash pop $STASH
		!'$STASH' -> git stash pop
	---
</CustomCommand>
